toBinary :: Int -> [ Int ] -- takes an int and returns a list of ints
toBinary 0 = [ 0 ]            -- if the number entered is 0 the binary rep will just be 0  
toBinary n = toBinary ( n `quot` 2 ) ++ [ n `rem` 2 ]

cnt :: Eq a => a -> [a] -> Int
cnt x [] = 0
cnt x (y:ys)
    | x == y = 1 + (cnt x ys)
    | otherwise = cnt x ys

isEvil :: Int -> Bool
isEvil n = even(cnt 1 (toBinary n)) 

evils:: [Int] 
evils = filter (isEvil) [0..]