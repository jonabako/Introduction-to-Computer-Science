toBinary :: Int -> [ Int ] 
toBinary 0 = [ 0 ]        
toBinary n = toBinary ( n `quot` 2 ) ++ [ n `rem` 2 ] 

cnt :: Eq a => a -> [a] -> Int 
cnt x [] = 0
cnt x (y:ys)
    | x == y = 1 + (cnt x ys)
    | otherwise = cnt x ys

isOdious :: Int -> Bool
isOdious n = odd(cnt 1 (toBinary n))

odious:: [Int] 
odious = filter (isOdious) [0..]