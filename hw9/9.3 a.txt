module BoolExpr (Variable, BoolExpr(..), evaluate) where

import Data.List

type Variable = Char

data BoolExpr
 = T
 | F
 | Var Variable
 | Not BoolExpr
 | And BoolExpr BoolExpr
 | Or BoolExpr BoolExpr
 deriving (Show)

-- evaluates an expression
evaluate :: BoolExpr -> [Variable] -> Bool
evaluate T _ = True
evaluate F _ = False
evaluate (Var v) vs = v `elem` vs
evaluate (Not e) vs = not (evaluate e vs)
evaluate (And e1 e2) vs = evaluate e1 vs && evaluate e2 vs
evaluate (Or e1 e2) vs = evaluate e1 vs || evaluate e2 vs

-- function variables :: BoolExpr -> [Variable]

variables :: BoolExpr -> [Variable]
-- takes datatype BoolExpr and returns the characters
variables T = ""
variables F = ""
variables (Var v) = [v]
variables (And e1 e2) = sort $ union (variables e1) (variables e2)
variables (Or e1 e2) = sort $ union (variables e1) (variables e2)
-- the function variable is recursed (called again) and the repetition is removed by the union function
-- sort function sorts list in alphabetical order